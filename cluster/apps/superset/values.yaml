image:
  repository: apachesuperset.docker.scarf.sh/apache/superset
  tag: ~
  pullPolicy: IfNotPresent

initImage:
  repository: apache/superset
  tag: dockerize
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8088
  annotations: {}

  loadBalancerIP: ~
  nodePort:
    http: nil

supersetNode:
  replicas:
    enabled: true
    replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  podDisruptionBudget:
    enabled: false

    minAvailable: 1

    maxUnavailable: 1

  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh"
  connections:
    redis_host: "{{ .Release.Name }}-redis-headless"
    redis_port: "6379"
    redis_user: ""

    redis_cache_db: "1"
    redis_celery_db: "0"

    redis_ssl:
      enabled: false
      ssl_cert_reqs: CERT_NONE

    db_host: "{{ .Release.Name }}-postgresql"
    db_port: "5432"
    db_user: superset
    db_pass: superset
    db_name: superset
  env: {}

  forceReload: false

  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: "{{ tpl .Values.envFromSecret . }}"
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s

  extraContainers: []

  deploymentAnnotations: {}

  deploymentLabels: {}

  affinity: {}

  topologySpreadConstraints: []

  podAnnotations: {}

  podLabels: {}
  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
    failureThreshold: 60
    periodSeconds: 5
    successThreshold: 1
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 15
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
    failureThreshold: 3
    periodSeconds: 15
    successThreshold: 1

  resources: {}

  podSecurityContext: {}
  containerSecurityContext: {}
  strategy: {}

supersetWorker:
  replicas:
    enabled: true
    replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  podDisruptionBudget:
    enabled: false

    minAvailable: 1

    maxUnavailable: 1

  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"

  forceReload: false

  initContainers:
    - name: wait-for-postgres-redis
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: "{{ tpl .Values.envFromSecret . }}"
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s

  extraContainers: []

  deploymentAnnotations: {}

  deploymentLabels: {}

  affinity: {}

  topologySpreadConstraints: []

  podAnnotations: {}

  podLabels: {}

  resources: {}

  podSecurityContext: {}
  containerSecurityContext: {}
  strategy: {}

  livenessProbe:
    exec:
      command:
        - sh
        - -c
        - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
    initialDelaySeconds: 120
    timeoutSeconds: 60
    failureThreshold: 3
    periodSeconds: 60
    successThreshold: 1

  startupProbe: {}

  readinessProbe: {}

  priorityClassName: ~

bootstrapScript: |
  #!/bin/bash
  pip install psycopg2-binary redis clickhouse-connect && \
  if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi

configOverrides:
  secret: |
    SECRET_KEY = 'SECRET_KEY'